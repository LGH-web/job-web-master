{"remainingRequest":"C:\\Users\\LGH\\Desktop\\job-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\LGH\\Desktop\\job-web-master\\src\\views\\intention\\Add.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\LGH\\Desktop\\job-web-master\\src\\views\\intention\\Add.vue","mtime":1639545989000},{"path":"C:\\Users\\LGH\\Desktop\\job-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1666580385663},{"path":"C:\\Users\\LGH\\Desktop\\job-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1666580404783},{"path":"C:\\Users\\LGH\\Desktop\\job-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1666580381795}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7Y3JlYXRlfSBmcm9tICJAL2FwaS9pbnRlbnRpb24iOwppbXBvcnQge3F1ZXJ5fSBmcm9tICJAL2FwaS9yZXN1bWUiOwppbXBvcnQgUkZvcm0gZnJvbSAiQC9jb21wb25lbnRzL1JGb3JtIjsKaW1wb3J0IHtkaWN0X3F1ZXJ5fSBmcm9tICJAL2FwaS9kaWN0IjsKCmV4cG9ydCBkZWZhdWx0IHsKICAgIG5hbWU6ICJBZGQiLAogICAgY29tcG9uZW50czoge1JGb3JtfSwKICAgIHByb3BzOiB7CiAgICAgICAgcGFyYW06IHsKICAgICAgICAgICAgdHlwZTogT2JqZWN0LAogICAgICAgICAgICBkZWZhdWx0OiAoKSA9PiB7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9LAogICAgZGF0YSgpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgICBmb3JtOiB7CiAgICAgICAgICAgICAgICByZXN1bWVJZDogJycsCiAgICAgICAgICAgICAgICBuYW1lOiAnJywKICAgICAgICAgICAgICAgIHNhbGFyeTogJycsCiAgICAgICAgICAgICAgICBjaXR5OiAnJywKICAgICAgICAgICAgICAgIHR5cGU6ICcnLAogICAgICAgICAgICAgICAgaW5kdXN0cnk6ICcnLAogICAgICAgICAgICB9LAogICAgICAgICAgICBydWxlczogewogICAgICAgICAgICAgICAgcmVzdW1lSWQ6IFt7cmVxdWlyZWQ6IHRydWUsIG1lc3NhZ2U6ICflv4XloavpobnkuI3og73kuLrnqbonfV0sCiAgICAgICAgICAgICAgICBuYW1lOiBbe3JlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiAn5b+F5aGr6aG55LiN6IO95Li656m6J31dLAogICAgICAgICAgICAgICAgc2FsYXJ5OiBbe3JlcXVpcmVkOiB0cnVlLCBtZXNzYWdlOiAn5b+F5aGr6aG55LiN6IO95Li656m6J31dLAogICAgICAgICAgICB9LAogICAgICAgICAgICBpdGVtczogWwogICAgICAgICAgICAgICAge3R5cGU6ICdzZWxlY3QnLCBsYWJlbDogJ+eugOWOhicsIHByb3A6ICdyZXN1bWVJZCcsIG5hbWU6ICdyZXN1bWVJZCcsIHBsYWNlaG9sZGVyOiAn566A5Y6GJywgb3B0aW9uczogW119LAogICAgICAgICAgICAgICAge3R5cGU6ICd0ZXh0JywgbGFiZWw6ICfogYzkvY3lkI3np7AnLCBwcm9wOiAnbmFtZScsIG5hbWU6ICduYW1lJywgcGxhY2Vob2xkZXI6ICfogYzkvY3lkI3np7AnfSwKICAgICAgICAgICAgICAgIHt0eXBlOiAnc2VsZWN0JywgbGFiZWw6ICfolqrotYQnLCBwcm9wOiAnc2FsYXJ5JywgbmFtZTogJ3NhbGFyeScsIHBsYWNlaG9sZGVyOiAn6Jaq6LWEJ30sCiAgICAgICAgICAgICAgICB7dHlwZTogJ3RleHQnLCBsYWJlbDogJ+W3peS9nOWfjuW4gicsIHByb3A6ICdjaXR5JywgbmFtZTogJ2NpdHknLCBwbGFjZWhvbGRlcjogJ+WfjuW4gid9LAogICAgICAgICAgICAgICAge3R5cGU6ICdzZWxlY3QnLCBsYWJlbDogJ+W3peS9nOaAp+i0qCcsIHByb3A6ICd0eXBlJywgbmFtZTogJ3R5cGUnLCBwbGFjZWhvbGRlcjogJ+W3peS9nOaAp+i0qCd9LAogICAgICAgICAgICAgICAge3R5cGU6ICd0ZXh0JywgbGFiZWw6ICfmnJ/mnJvooYzkuJonLCBwcm9wOiAnaW5kdXN0cnknLCBuYW1lOiAnaW5kdXN0cnknLCBwbGFjZWhvbGRlcjogJ+acn+acm+ihjOS4mid9LAogICAgICAgICAgICBdCiAgICAgICAgfQogICAgfSwKICAgIG1vdW50ZWQoKSB7CiAgICAgICAgdGhpcy5nZXREaWN0TGlzdDEoMyk7CiAgICAgICAgdGhpcy5nZXREaWN0TGlzdDIoNik7CgogICAgICAgIHF1ZXJ5KHt9KS50aGVuKHJlcyA9PiB7CiAgICAgICAgICAgIGxldCBhcnIgPSBbXTsKICAgICAgICAgICAgcmVzLmRhdGEuZm9yRWFjaChpdGVtID0+IHsKICAgICAgICAgICAgICAgIGxldCBwYXJhbSA9IHt2YWx1ZTogaXRlbS5pZCwgbGFiZWw6IGl0ZW0ubmFtZX0KICAgICAgICAgICAgICAgIGFyci5wdXNoKHBhcmFtKQogICAgICAgICAgICB9KQogICAgICAgICAgICB0aGlzLml0ZW1zWzBdLm9wdGlvbnMgPSBhcnI7CiAgICAgICAgfSk7CiAgICB9LAogICAgbWV0aG9kczogewogICAgICAgIGdldERpY3RMaXN0MSh0eXBlSWQpIHsKICAgICAgICAgICAgZGljdF9xdWVyeSh7dHlwZUlkOiB0eXBlSWR9KS50aGVuKHJlcyA9PiB7CiAgICAgICAgICAgICAgICBsZXQgYXJyID0gW107CiAgICAgICAgICAgICAgICByZXMuZGF0YS5mb3JFYWNoKGl0ZW0gPT4gewogICAgICAgICAgICAgICAgICAgIGxldCBwID0ge3ZhbHVlOiBpdGVtLmRpY3RLZXksIGxhYmVsOiBpdGVtLmRpY3RWYWx9OwogICAgICAgICAgICAgICAgICAgIGFyci5wdXNoKHApOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB0aGlzLml0ZW1zLmZvckVhY2goaXRlbSA9PiB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0udHlwZSA9PSAnc2VsZWN0JyAmJiBpdGVtLm5hbWUgPT0gJ3NhbGFyeScpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5vcHRpb25zID0gYXJyOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIH0pCiAgICAgICAgfSwKICAgICAgICBnZXREaWN0TGlzdDIodHlwZUlkKSB7CiAgICAgICAgICAgIGRpY3RfcXVlcnkoe3R5cGVJZDogdHlwZUlkfSkudGhlbihyZXMgPT4gewogICAgICAgICAgICAgICAgbGV0IGFyciA9IFtdOwogICAgICAgICAgICAgICAgcmVzLmRhdGEuZm9yRWFjaChpdGVtID0+IHsKICAgICAgICAgICAgICAgICAgICBsZXQgcCA9IHt2YWx1ZTogaXRlbS5kaWN0S2V5LCBsYWJlbDogaXRlbS5kaWN0VmFsfTsKICAgICAgICAgICAgICAgICAgICBhcnIucHVzaChwKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgdGhpcy5pdGVtcy5mb3JFYWNoKGl0ZW0gPT4gewogICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLnR5cGUgPT0gJ3NlbGVjdCcgJiYgaXRlbS5uYW1lID09ICd0eXBlJykgewogICAgICAgICAgICAgICAgICAgICAgICBpdGVtLm9wdGlvbnMgPSBhcnI7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgfSkKICAgICAgICB9LAogICAgICAgIHNhdmUoKSB7CiAgICAgICAgICAgIGxldCBmbGFnID0gdGhpcy4kcmVmc1snbXlGb3JtJ10udmFsaWRhdGVGb3JtKCk7CiAgICAgICAgICAgIGlmIChmbGFnKSB7CiAgICAgICAgICAgICAgICBjcmVhdGUodGhpcy5mb3JtKS50aGVuKHJlcyA9PiB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy4kbWVzc2FnZS5zdWNjZXNzKHJlcy5tc2cpOwogICAgICAgICAgICAgICAgICAgIHRoaXMucGFyYW0uY2xvc2UoKTsKICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmFtLmNhbGxiYWNrKCk7CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9Cg=="},{"version":3,"sources":["Add.vue"],"names":[],"mappings":";;;;;;;AAOA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Add.vue","sourceRoot":"src/views/intention","sourcesContent":["<template>\n    <el-dialog title=\"新增\" :visible.sync=\"param.visible\" @close=\"param.close\" :close-on-click-modal=\"false\">\n        <r-form ref=\"myForm\" :rules=\"rules\" :form=\"form\" :items=\"items\" :save=\"save\"></r-form>\n    </el-dialog>\n</template>\n\n<script>\n    import {create} from \"@/api/intention\";\n    import {query} from \"@/api/resume\";\n    import RForm from \"@/components/RForm\";\n    import {dict_query} from \"@/api/dict\";\n\n    export default {\n        name: \"Add\",\n        components: {RForm},\n        props: {\n            param: {\n                type: Object,\n                default: () => {\n                }\n            }\n        },\n        data() {\n            return {\n                form: {\n                    resumeId: '',\n                    name: '',\n                    salary: '',\n                    city: '',\n                    type: '',\n                    industry: '',\n                },\n                rules: {\n                    resumeId: [{required: true, message: '必填项不能为空'}],\n                    name: [{required: true, message: '必填项不能为空'}],\n                    salary: [{required: true, message: '必填项不能为空'}],\n                },\n                items: [\n                    {type: 'select', label: '简历', prop: 'resumeId', name: 'resumeId', placeholder: '简历', options: []},\n                    {type: 'text', label: '职位名称', prop: 'name', name: 'name', placeholder: '职位名称'},\n                    {type: 'select', label: '薪资', prop: 'salary', name: 'salary', placeholder: '薪资'},\n                    {type: 'text', label: '工作城市', prop: 'city', name: 'city', placeholder: '城市'},\n                    {type: 'select', label: '工作性质', prop: 'type', name: 'type', placeholder: '工作性质'},\n                    {type: 'text', label: '期望行业', prop: 'industry', name: 'industry', placeholder: '期望行业'},\n                ]\n            }\n        },\n        mounted() {\n            this.getDictList1(3);\n            this.getDictList2(6);\n\n            query({}).then(res => {\n                let arr = [];\n                res.data.forEach(item => {\n                    let param = {value: item.id, label: item.name}\n                    arr.push(param)\n                })\n                this.items[0].options = arr;\n            });\n        },\n        methods: {\n            getDictList1(typeId) {\n                dict_query({typeId: typeId}).then(res => {\n                    let arr = [];\n                    res.data.forEach(item => {\n                        let p = {value: item.dictKey, label: item.dictVal};\n                        arr.push(p);\n                    });\n                    this.items.forEach(item => {\n                        if (item.type == 'select' && item.name == 'salary') {\n                            item.options = arr;\n                        }\n                    })\n                })\n            },\n            getDictList2(typeId) {\n                dict_query({typeId: typeId}).then(res => {\n                    let arr = [];\n                    res.data.forEach(item => {\n                        let p = {value: item.dictKey, label: item.dictVal};\n                        arr.push(p);\n                    });\n                    this.items.forEach(item => {\n                        if (item.type == 'select' && item.name == 'type') {\n                            item.options = arr;\n                        }\n                    })\n                })\n            },\n            save() {\n                let flag = this.$refs['myForm'].validateForm();\n                if (flag) {\n                    create(this.form).then(res => {\n                        this.$message.success(res.msg);\n                        this.param.close();\n                        this.param.callback();\n                    })\n                }\n            }\n        }\n    }\n</script>\n\n<style scoped>\n\n</style>"]}]}