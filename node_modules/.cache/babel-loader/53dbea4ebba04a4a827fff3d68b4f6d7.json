{"remainingRequest":"G:\\IdeaFile\\job-web-master\\node_modules\\babel-loader\\lib\\index.js!G:\\IdeaFile\\job-web-master\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!G:\\IdeaFile\\job-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!G:\\IdeaFile\\job-web-master\\src\\views\\intention\\Add.vue?vue&type=script&lang=js&","dependencies":[{"path":"G:\\IdeaFile\\job-web-master\\src\\views\\intention\\Add.vue","mtime":1639545989000},{"path":"G:\\IdeaFile\\job-web-master\\babel.config.js","mtime":1639545989000},{"path":"G:\\IdeaFile\\job-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1666580404783},{"path":"G:\\IdeaFile\\job-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1666580385663},{"path":"G:\\IdeaFile\\job-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1666580404783},{"path":"G:\\IdeaFile\\job-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1666580381795}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUuanMiOwovLwovLwovLwovLwovLwovLwppbXBvcnQgeyBjcmVhdGUgfSBmcm9tICJAL2FwaS9pbnRlbnRpb24iOwppbXBvcnQgeyBxdWVyeSB9IGZyb20gIkAvYXBpL3Jlc3VtZSI7CmltcG9ydCBSRm9ybSBmcm9tICJAL2NvbXBvbmVudHMvUkZvcm0iOwppbXBvcnQgeyBkaWN0X3F1ZXJ5IH0gZnJvbSAiQC9hcGkvZGljdCI7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiQWRkIiwKICBjb21wb25lbnRzOiB7CiAgICBSRm9ybTogUkZvcm0KICB9LAogIHByb3BzOiB7CiAgICBwYXJhbTogewogICAgICB0eXBlOiBPYmplY3QsCiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkge30KICAgIH0KICB9LAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBmb3JtOiB7CiAgICAgICAgcmVzdW1lSWQ6ICcnLAogICAgICAgIG5hbWU6ICcnLAogICAgICAgIHNhbGFyeTogJycsCiAgICAgICAgY2l0eTogJycsCiAgICAgICAgdHlwZTogJycsCiAgICAgICAgaW5kdXN0cnk6ICcnCiAgICAgIH0sCiAgICAgIHJ1bGVzOiB7CiAgICAgICAgcmVzdW1lSWQ6IFt7CiAgICAgICAgICByZXF1aXJlZDogdHJ1ZSwKICAgICAgICAgIG1lc3NhZ2U6ICflv4XloavpobnkuI3og73kuLrnqbonCiAgICAgICAgfV0sCiAgICAgICAgbmFtZTogW3sKICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgICAgbWVzc2FnZTogJ+W/heWhq+mhueS4jeiDveS4uuepuicKICAgICAgICB9XSwKICAgICAgICBzYWxhcnk6IFt7CiAgICAgICAgICByZXF1aXJlZDogdHJ1ZSwKICAgICAgICAgIG1lc3NhZ2U6ICflv4XloavpobnkuI3og73kuLrnqbonCiAgICAgICAgfV0KICAgICAgfSwKICAgICAgaXRlbXM6IFt7CiAgICAgICAgdHlwZTogJ3NlbGVjdCcsCiAgICAgICAgbGFiZWw6ICfnroDljoYnLAogICAgICAgIHByb3A6ICdyZXN1bWVJZCcsCiAgICAgICAgbmFtZTogJ3Jlc3VtZUlkJywKICAgICAgICBwbGFjZWhvbGRlcjogJ+eugOWOhicsCiAgICAgICAgb3B0aW9uczogW10KICAgICAgfSwgewogICAgICAgIHR5cGU6ICd0ZXh0JywKICAgICAgICBsYWJlbDogJ+iBjOS9jeWQjeensCcsCiAgICAgICAgcHJvcDogJ25hbWUnLAogICAgICAgIG5hbWU6ICduYW1lJywKICAgICAgICBwbGFjZWhvbGRlcjogJ+iBjOS9jeWQjeensCcKICAgICAgfSwgewogICAgICAgIHR5cGU6ICdzZWxlY3QnLAogICAgICAgIGxhYmVsOiAn6Jaq6LWEJywKICAgICAgICBwcm9wOiAnc2FsYXJ5JywKICAgICAgICBuYW1lOiAnc2FsYXJ5JywKICAgICAgICBwbGFjZWhvbGRlcjogJ+iWqui1hCcKICAgICAgfSwgewogICAgICAgIHR5cGU6ICd0ZXh0JywKICAgICAgICBsYWJlbDogJ+W3peS9nOWfjuW4gicsCiAgICAgICAgcHJvcDogJ2NpdHknLAogICAgICAgIG5hbWU6ICdjaXR5JywKICAgICAgICBwbGFjZWhvbGRlcjogJ+WfjuW4gicKICAgICAgfSwgewogICAgICAgIHR5cGU6ICdzZWxlY3QnLAogICAgICAgIGxhYmVsOiAn5bel5L2c5oCn6LSoJywKICAgICAgICBwcm9wOiAndHlwZScsCiAgICAgICAgbmFtZTogJ3R5cGUnLAogICAgICAgIHBsYWNlaG9sZGVyOiAn5bel5L2c5oCn6LSoJwogICAgICB9LCB7CiAgICAgICAgdHlwZTogJ3RleHQnLAogICAgICAgIGxhYmVsOiAn5pyf5pyb6KGM5LiaJywKICAgICAgICBwcm9wOiAnaW5kdXN0cnknLAogICAgICAgIG5hbWU6ICdpbmR1c3RyeScsCiAgICAgICAgcGxhY2Vob2xkZXI6ICfmnJ/mnJvooYzkuJonCiAgICAgIH1dCiAgICB9OwogIH0sCiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHsKICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgdGhpcy5nZXREaWN0TGlzdDEoMyk7CiAgICB0aGlzLmdldERpY3RMaXN0Mig2KTsKICAgIHF1ZXJ5KHt9KS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgdmFyIGFyciA9IFtdOwogICAgICByZXMuZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgdmFyIHBhcmFtID0gewogICAgICAgICAgdmFsdWU6IGl0ZW0uaWQsCiAgICAgICAgICBsYWJlbDogaXRlbS5uYW1lCiAgICAgICAgfTsKICAgICAgICBhcnIucHVzaChwYXJhbSk7CiAgICAgIH0pOwogICAgICBfdGhpcy5pdGVtc1swXS5vcHRpb25zID0gYXJyOwogICAgfSk7CiAgfSwKICBtZXRob2RzOiB7CiAgICBnZXREaWN0TGlzdDE6IGZ1bmN0aW9uIGdldERpY3RMaXN0MSh0eXBlSWQpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICBkaWN0X3F1ZXJ5KHsKICAgICAgICB0eXBlSWQ6IHR5cGVJZAogICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICB2YXIgYXJyID0gW107CiAgICAgICAgcmVzLmRhdGEuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgdmFyIHAgPSB7CiAgICAgICAgICAgIHZhbHVlOiBpdGVtLmRpY3RLZXksCiAgICAgICAgICAgIGxhYmVsOiBpdGVtLmRpY3RWYWwKICAgICAgICAgIH07CiAgICAgICAgICBhcnIucHVzaChwKTsKICAgICAgICB9KTsKCiAgICAgICAgX3RoaXMyLml0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgIGlmIChpdGVtLnR5cGUgPT0gJ3NlbGVjdCcgJiYgaXRlbS5uYW1lID09ICdzYWxhcnknKSB7CiAgICAgICAgICAgIGl0ZW0ub3B0aW9ucyA9IGFycjsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9LAogICAgZ2V0RGljdExpc3QyOiBmdW5jdGlvbiBnZXREaWN0TGlzdDIodHlwZUlkKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgZGljdF9xdWVyeSh7CiAgICAgICAgdHlwZUlkOiB0eXBlSWQKICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgdmFyIGFyciA9IFtdOwogICAgICAgIHJlcy5kYXRhLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgIHZhciBwID0gewogICAgICAgICAgICB2YWx1ZTogaXRlbS5kaWN0S2V5LAogICAgICAgICAgICBsYWJlbDogaXRlbS5kaWN0VmFsCiAgICAgICAgICB9OwogICAgICAgICAgYXJyLnB1c2gocCk7CiAgICAgICAgfSk7CgogICAgICAgIF90aGlzMy5pdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICBpZiAoaXRlbS50eXBlID09ICdzZWxlY3QnICYmIGl0ZW0ubmFtZSA9PSAndHlwZScpIHsKICAgICAgICAgICAgaXRlbS5vcHRpb25zID0gYXJyOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0sCiAgICBzYXZlOiBmdW5jdGlvbiBzYXZlKCkgewogICAgICB2YXIgX3RoaXM0ID0gdGhpczsKCiAgICAgIHZhciBmbGFnID0gdGhpcy4kcmVmc1snbXlGb3JtJ10udmFsaWRhdGVGb3JtKCk7CgogICAgICBpZiAoZmxhZykgewogICAgICAgIGNyZWF0ZSh0aGlzLmZvcm0pLnRoZW4oZnVuY3Rpb24gKHJlcykgewogICAgICAgICAgX3RoaXM0LiRtZXNzYWdlLnN1Y2Nlc3MocmVzLm1zZyk7CgogICAgICAgICAgX3RoaXM0LnBhcmFtLmNsb3NlKCk7CgogICAgICAgICAgX3RoaXM0LnBhcmFtLmNhbGxiYWNrKCk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KICB9Cn07"},{"version":3,"sources":["Add.vue"],"names":[],"mappings":";;;;;;;;AAOA,SAAA,MAAA,QAAA,iBAAA;AACA,SAAA,KAAA,QAAA,cAAA;AACA,OAAA,KAAA,MAAA,oBAAA;AACA,SAAA,UAAA,QAAA,YAAA;AAEA,eAAA;AACA,EAAA,IAAA,EAAA,KADA;AAEA,EAAA,UAAA,EAAA;AAAA,IAAA,KAAA,EAAA;AAAA,GAFA;AAGA,EAAA,KAAA,EAAA;AACA,IAAA,KAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA,oBAAA,CACA;AAHA;AADA,GAHA;AAUA,EAAA,IAVA,kBAUA;AACA,WAAA;AACA,MAAA,IAAA,EAAA;AACA,QAAA,QAAA,EAAA,EADA;AAEA,QAAA,IAAA,EAAA,EAFA;AAGA,QAAA,MAAA,EAAA,EAHA;AAIA,QAAA,IAAA,EAAA,EAJA;AAKA,QAAA,IAAA,EAAA,EALA;AAMA,QAAA,QAAA,EAAA;AANA,OADA;AASA,MAAA,KAAA,EAAA;AACA,QAAA,QAAA,EAAA,CAAA;AAAA,UAAA,QAAA,EAAA,IAAA;AAAA,UAAA,OAAA,EAAA;AAAA,SAAA,CADA;AAEA,QAAA,IAAA,EAAA,CAAA;AAAA,UAAA,QAAA,EAAA,IAAA;AAAA,UAAA,OAAA,EAAA;AAAA,SAAA,CAFA;AAGA,QAAA,MAAA,EAAA,CAAA;AAAA,UAAA,QAAA,EAAA,IAAA;AAAA,UAAA,OAAA,EAAA;AAAA,SAAA;AAHA,OATA;AAcA,MAAA,KAAA,EAAA,CACA;AAAA,QAAA,IAAA,EAAA,QAAA;AAAA,QAAA,KAAA,EAAA,IAAA;AAAA,QAAA,IAAA,EAAA,UAAA;AAAA,QAAA,IAAA,EAAA,UAAA;AAAA,QAAA,WAAA,EAAA,IAAA;AAAA,QAAA,OAAA,EAAA;AAAA,OADA,EAEA;AAAA,QAAA,IAAA,EAAA,MAAA;AAAA,QAAA,KAAA,EAAA,MAAA;AAAA,QAAA,IAAA,EAAA,MAAA;AAAA,QAAA,IAAA,EAAA,MAAA;AAAA,QAAA,WAAA,EAAA;AAAA,OAFA,EAGA;AAAA,QAAA,IAAA,EAAA,QAAA;AAAA,QAAA,KAAA,EAAA,IAAA;AAAA,QAAA,IAAA,EAAA,QAAA;AAAA,QAAA,IAAA,EAAA,QAAA;AAAA,QAAA,WAAA,EAAA;AAAA,OAHA,EAIA;AAAA,QAAA,IAAA,EAAA,MAAA;AAAA,QAAA,KAAA,EAAA,MAAA;AAAA,QAAA,IAAA,EAAA,MAAA;AAAA,QAAA,IAAA,EAAA,MAAA;AAAA,QAAA,WAAA,EAAA;AAAA,OAJA,EAKA;AAAA,QAAA,IAAA,EAAA,QAAA;AAAA,QAAA,KAAA,EAAA,MAAA;AAAA,QAAA,IAAA,EAAA,MAAA;AAAA,QAAA,IAAA,EAAA,MAAA;AAAA,QAAA,WAAA,EAAA;AAAA,OALA,EAMA;AAAA,QAAA,IAAA,EAAA,MAAA;AAAA,QAAA,KAAA,EAAA,MAAA;AAAA,QAAA,IAAA,EAAA,UAAA;AAAA,QAAA,IAAA,EAAA,UAAA;AAAA,QAAA,WAAA,EAAA;AAAA,OANA;AAdA,KAAA;AAuBA,GAlCA;AAmCA,EAAA,OAnCA,qBAmCA;AAAA;;AACA,SAAA,YAAA,CAAA,CAAA;AACA,SAAA,YAAA,CAAA,CAAA;AAEA,IAAA,KAAA,CAAA,EAAA,CAAA,CAAA,IAAA,CAAA,UAAA,GAAA,EAAA;AACA,UAAA,GAAA,GAAA,EAAA;AACA,MAAA,GAAA,CAAA,IAAA,CAAA,OAAA,CAAA,UAAA,IAAA,EAAA;AACA,YAAA,KAAA,GAAA;AAAA,UAAA,KAAA,EAAA,IAAA,CAAA,EAAA;AAAA,UAAA,KAAA,EAAA,IAAA,CAAA;AAAA,SAAA;AACA,QAAA,GAAA,CAAA,IAAA,CAAA,KAAA;AACA,OAHA;AAIA,MAAA,KAAA,CAAA,KAAA,CAAA,CAAA,EAAA,OAAA,GAAA,GAAA;AACA,KAPA;AAQA,GA/CA;AAgDA,EAAA,OAAA,EAAA;AACA,IAAA,YADA,wBACA,MADA,EACA;AAAA;;AACA,MAAA,UAAA,CAAA;AAAA,QAAA,MAAA,EAAA;AAAA,OAAA,CAAA,CAAA,IAAA,CAAA,UAAA,GAAA,EAAA;AACA,YAAA,GAAA,GAAA,EAAA;AACA,QAAA,GAAA,CAAA,IAAA,CAAA,OAAA,CAAA,UAAA,IAAA,EAAA;AACA,cAAA,CAAA,GAAA;AAAA,YAAA,KAAA,EAAA,IAAA,CAAA,OAAA;AAAA,YAAA,KAAA,EAAA,IAAA,CAAA;AAAA,WAAA;AACA,UAAA,GAAA,CAAA,IAAA,CAAA,CAAA;AACA,SAHA;;AAIA,QAAA,MAAA,CAAA,KAAA,CAAA,OAAA,CAAA,UAAA,IAAA,EAAA;AACA,cAAA,IAAA,CAAA,IAAA,IAAA,QAAA,IAAA,IAAA,CAAA,IAAA,IAAA,QAAA,EAAA;AACA,YAAA,IAAA,CAAA,OAAA,GAAA,GAAA;AACA;AACA,SAJA;AAKA,OAXA;AAYA,KAdA;AAeA,IAAA,YAfA,wBAeA,MAfA,EAeA;AAAA;;AACA,MAAA,UAAA,CAAA;AAAA,QAAA,MAAA,EAAA;AAAA,OAAA,CAAA,CAAA,IAAA,CAAA,UAAA,GAAA,EAAA;AACA,YAAA,GAAA,GAAA,EAAA;AACA,QAAA,GAAA,CAAA,IAAA,CAAA,OAAA,CAAA,UAAA,IAAA,EAAA;AACA,cAAA,CAAA,GAAA;AAAA,YAAA,KAAA,EAAA,IAAA,CAAA,OAAA;AAAA,YAAA,KAAA,EAAA,IAAA,CAAA;AAAA,WAAA;AACA,UAAA,GAAA,CAAA,IAAA,CAAA,CAAA;AACA,SAHA;;AAIA,QAAA,MAAA,CAAA,KAAA,CAAA,OAAA,CAAA,UAAA,IAAA,EAAA;AACA,cAAA,IAAA,CAAA,IAAA,IAAA,QAAA,IAAA,IAAA,CAAA,IAAA,IAAA,MAAA,EAAA;AACA,YAAA,IAAA,CAAA,OAAA,GAAA,GAAA;AACA;AACA,SAJA;AAKA,OAXA;AAYA,KA5BA;AA6BA,IAAA,IA7BA,kBA6BA;AAAA;;AACA,UAAA,IAAA,GAAA,KAAA,KAAA,CAAA,QAAA,EAAA,YAAA,EAAA;;AACA,UAAA,IAAA,EAAA;AACA,QAAA,MAAA,CAAA,KAAA,IAAA,CAAA,CAAA,IAAA,CAAA,UAAA,GAAA,EAAA;AACA,UAAA,MAAA,CAAA,QAAA,CAAA,OAAA,CAAA,GAAA,CAAA,GAAA;;AACA,UAAA,MAAA,CAAA,KAAA,CAAA,KAAA;;AACA,UAAA,MAAA,CAAA,KAAA,CAAA,QAAA;AACA,SAJA;AAKA;AACA;AAtCA;AAhDA,CAAA","sourcesContent":["<template>\n    <el-dialog title=\"新增\" :visible.sync=\"param.visible\" @close=\"param.close\" :close-on-click-modal=\"false\">\n        <r-form ref=\"myForm\" :rules=\"rules\" :form=\"form\" :items=\"items\" :save=\"save\"></r-form>\n    </el-dialog>\n</template>\n\n<script>\n    import {create} from \"@/api/intention\";\n    import {query} from \"@/api/resume\";\n    import RForm from \"@/components/RForm\";\n    import {dict_query} from \"@/api/dict\";\n\n    export default {\n        name: \"Add\",\n        components: {RForm},\n        props: {\n            param: {\n                type: Object,\n                default: () => {\n                }\n            }\n        },\n        data() {\n            return {\n                form: {\n                    resumeId: '',\n                    name: '',\n                    salary: '',\n                    city: '',\n                    type: '',\n                    industry: '',\n                },\n                rules: {\n                    resumeId: [{required: true, message: '必填项不能为空'}],\n                    name: [{required: true, message: '必填项不能为空'}],\n                    salary: [{required: true, message: '必填项不能为空'}],\n                },\n                items: [\n                    {type: 'select', label: '简历', prop: 'resumeId', name: 'resumeId', placeholder: '简历', options: []},\n                    {type: 'text', label: '职位名称', prop: 'name', name: 'name', placeholder: '职位名称'},\n                    {type: 'select', label: '薪资', prop: 'salary', name: 'salary', placeholder: '薪资'},\n                    {type: 'text', label: '工作城市', prop: 'city', name: 'city', placeholder: '城市'},\n                    {type: 'select', label: '工作性质', prop: 'type', name: 'type', placeholder: '工作性质'},\n                    {type: 'text', label: '期望行业', prop: 'industry', name: 'industry', placeholder: '期望行业'},\n                ]\n            }\n        },\n        mounted() {\n            this.getDictList1(3);\n            this.getDictList2(6);\n\n            query({}).then(res => {\n                let arr = [];\n                res.data.forEach(item => {\n                    let param = {value: item.id, label: item.name}\n                    arr.push(param)\n                })\n                this.items[0].options = arr;\n            });\n        },\n        methods: {\n            getDictList1(typeId) {\n                dict_query({typeId: typeId}).then(res => {\n                    let arr = [];\n                    res.data.forEach(item => {\n                        let p = {value: item.dictKey, label: item.dictVal};\n                        arr.push(p);\n                    });\n                    this.items.forEach(item => {\n                        if (item.type == 'select' && item.name == 'salary') {\n                            item.options = arr;\n                        }\n                    })\n                })\n            },\n            getDictList2(typeId) {\n                dict_query({typeId: typeId}).then(res => {\n                    let arr = [];\n                    res.data.forEach(item => {\n                        let p = {value: item.dictKey, label: item.dictVal};\n                        arr.push(p);\n                    });\n                    this.items.forEach(item => {\n                        if (item.type == 'select' && item.name == 'type') {\n                            item.options = arr;\n                        }\n                    })\n                })\n            },\n            save() {\n                let flag = this.$refs['myForm'].validateForm();\n                if (flag) {\n                    create(this.form).then(res => {\n                        this.$message.success(res.msg);\n                        this.param.close();\n                        this.param.callback();\n                    })\n                }\n            }\n        }\n    }\n</script>\n\n<style scoped>\n\n</style>"],"sourceRoot":"src/views/intention"}]}