{"remainingRequest":"C:\\Users\\LGH\\Desktop\\job-web-master\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\LGH\\Desktop\\job-web-master\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\LGH\\Desktop\\job-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\LGH\\Desktop\\job-web-master\\src\\views\\dict\\Dict.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\LGH\\Desktop\\job-web-master\\src\\views\\dict\\Dict.vue","mtime":1639545989000},{"path":"C:\\Users\\LGH\\Desktop\\job-web-master\\babel.config.js","mtime":1639545989000},{"path":"C:\\Users\\LGH\\Desktop\\job-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1666580404783},{"path":"C:\\Users\\LGH\\Desktop\\job-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1666580385663},{"path":"C:\\Users\\LGH\\Desktop\\job-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1666580404783},{"path":"C:\\Users\\LGH\\Desktop\\job-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1666580381795}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuam9pbi5qcyI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCB7IHR5cGVfcXVlcnksIGRpY3RfcXVlcnksIGRlbCBhcyBfZGVsIH0gZnJvbSAnLi4vLi4vYXBpL2RpY3QnOwppbXBvcnQgUlRhYmxlIGZyb20gIi4uLy4uL2NvbXBvbmVudHMvUlRhYmxlIjsKaW1wb3J0IEFkZCBmcm9tICIuL0FkZCI7CmltcG9ydCBFZGl0IGZyb20gIi4vRWRpdCI7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiRGljdCIsCiAgY29tcG9uZW50czogewogICAgRWRpdDogRWRpdCwKICAgIEFkZDogQWRkLAogICAgUlRhYmxlOiBSVGFibGUKICB9LAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICB0eXBlVGFibGVEYXRhOiBbXSwKICAgICAgYWN0aXZlOiAwLAogICAgICBzZWxlY3RUeXBlSWQ6IDAsCiAgICAgIHR5cGVUYWJsZUNvbHM6IFt7CiAgICAgICAgcHJvcDogJ25hbWUnLAogICAgICAgIGxhYmVsOiAn57G75Z6L5ZCN56ewJwogICAgICB9XSwKICAgICAgZGljdFRhYmxlRGF0YTogW10sCiAgICAgIGRpY3RUYWJsZUNvbHM6IFt7CiAgICAgICAgcHJvcDogJ2RpY3RLZXknLAogICAgICAgIGxhYmVsOiAn5a2X5YW45ZCN56ewJwogICAgICB9LCB7CiAgICAgICAgcHJvcDogJ2RpY3RWYWwnLAogICAgICAgIGxhYmVsOiAn5a2X5YW45YC8JwogICAgICB9LCB7CiAgICAgICAgcHJvcDogJ3N0YXR1cycsCiAgICAgICAgbGFiZWw6ICfnirbmgIEnLAogICAgICAgIHNsb3Q6ICdzbG90X3N0YXR1cycKICAgICAgfSwgewogICAgICAgIHByb3A6ICdzb3J0JywKICAgICAgICBsYWJlbDogJ+W6j+WPtycsCiAgICAgICAgd2lkdGg6IDEwMAogICAgICB9XSwKICAgICAgYWRkOiB7CiAgICAgICAgdmlzaWJsZTogZmFsc2UsCiAgICAgICAgY2xvc2U6IHRoaXMuY2xvc2UsCiAgICAgICAgY2FsbGJhY2s6IHRoaXMucmVsb2FkCiAgICAgIH0sCiAgICAgIGVkaXQ6IHsKICAgICAgICB2aXNpYmxlOiBmYWxzZSwKICAgICAgICBjbG9zZTogdGhpcy5jbG9zZSwKICAgICAgICBjYWxsYmFjazogdGhpcy5yZWxvYWQsCiAgICAgICAgZm9ybTogbnVsbAogICAgICB9CiAgICB9OwogIH0sCiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHsKICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgdHlwZV9xdWVyeSh7fSkudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgIF90aGlzLnR5cGVUYWJsZURhdGEgPSByZXMuZGF0YTsKICAgICAgX3RoaXMuc2VsZWN0VHlwZUlkID0gX3RoaXMudHlwZVRhYmxlRGF0YVswXS5pZDsKICAgIH0pOwogICAgdGhpcy5saXN0KHsKICAgICAgdHlwZUlkOiB0aGlzLnNlbGVjdFR5cGVJZAogICAgfSk7CiAgfSwKICBtZXRob2RzOiB7CiAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHsKICAgICAgdGhpcy5hZGQudmlzaWJsZSA9IHRydWU7CiAgICB9LAogICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoKSB7CiAgICAgIHZhciBzZWxlY3Rpb25zID0gdGhpcy4kcmVmc1snbXV0aXBsZVRhYmxlJ10uc2VsZWN0aW9uOwoKICAgICAgaWYgKHNlbGVjdGlvbnMubGVuZ3RoID09IDEpIHsKICAgICAgICB0aGlzLmVkaXQudmlzaWJsZSA9IHRydWU7CiAgICAgICAgdGhpcy5lZGl0LmZvcm0gPSBzZWxlY3Rpb25zWzBdOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuJG1lc3NhZ2Uud2FybmluZygi6K+36YCJ5oup5LiA5p2h5pWw5o2u6L+b6KGM5L+u5pS5Iik7CiAgICAgIH0KICAgIH0sCiAgICByZWxvYWQ6IGZ1bmN0aW9uIHJlbG9hZCgpIHsKICAgICAgdGhpcy5saXN0KHsKICAgICAgICB0eXBlSWQ6IHRoaXMuc2VsZWN0VHlwZUlkCiAgICAgIH0pOwogICAgfSwKICAgIGxpc3Q6IGZ1bmN0aW9uIGxpc3QocGFyYW0pIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICBkaWN0X3F1ZXJ5KHBhcmFtKS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICBfdGhpczIuZGljdFRhYmxlRGF0YSA9IHJlcy5kYXRhOwogICAgICB9KTsKICAgIH0sCiAgICBjbG9zZTogZnVuY3Rpb24gY2xvc2UoKSB7CiAgICAgIHRoaXMuYWRkLnZpc2libGUgPSBmYWxzZTsKICAgICAgdGhpcy5lZGl0LnZpc2libGUgPSBmYWxzZTsKICAgIH0sCiAgICBkZWw6IGZ1bmN0aW9uIGRlbCgpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICB2YXIgc2VsZWN0aW9ucyA9IHRoaXMuJHJlZnNbJ211dGlwbGVUYWJsZSddLnNlbGVjdGlvbjsKCiAgICAgIGlmIChzZWxlY3Rpb25zLmxlbmd0aCA+IDApIHsKICAgICAgICB0aGlzLiRjb25maXJtKCLnoa7lrprmnInliKDpmaTlkJfvvJ8iLCAi5Yig6Zmk5o+Q56S6IikudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICB2YXIgYXJyID0gc2VsZWN0aW9ucy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgcmV0dXJuIGl0ZW0uaWQ7CiAgICAgICAgICB9KTsKICAgICAgICAgIHZhciBpZHMgPSBhcnIuam9pbignLCcpOwoKICAgICAgICAgIF9kZWwoaWRzKS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICAgICAgX3RoaXMzLiRtZXNzYWdlLnN1Y2Nlc3MocmVzLm1zZyk7CgogICAgICAgICAgICBfdGhpczMucmVsb2FkKCk7CiAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoKSB7fSk7CiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy4kbWVzc2FnZS53YXJuaW5nKCLor7fpgInmi6nopoHliKDpmaTnmoTmlbDmja4iKTsKICAgICAgfQogICAgfSwKICAgIGhhbmRsZVR5cGU6IGZ1bmN0aW9uIGhhbmRsZVR5cGUoaW5kZXgsIHR5cGVJZCkgewogICAgICB0aGlzLmFjdGl2ZSA9IGluZGV4OwogICAgICB0aGlzLnNlbGVjdFR5cGVJZCA9IHR5cGVJZDsKICAgICAgdGhpcy5saXN0KHsKICAgICAgICB0eXBlSWQ6IHR5cGVJZAogICAgICB9KTsKICAgIH0KICB9Cn07"},{"version":3,"sources":["Dict.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <div style=\"background: #f2f2f2\">\n        <el-row :gutter=\"20\">\n            <el-col :span=\"5\">\n                <el-card>\n                    <ul class=\"type\">\n                        <li @click=\"handleType(index,item.id)\" :class=\"active==index?'active':''\"\n                            v-for=\"(item,index) in typeTableData\" :key=\"index\">\n                            {{item.name}}\n                        </li>\n                    </ul>\n                </el-card>\n            </el-col>\n            <el-col :span=\"19\">\n                <el-card>\n                    <div class=\"btn-panel\">\n                        <el-button size=\"small\" type=\"primary\" icon=\"el-icon-plus\" @click=\"create\">新增</el-button>\n                        <el-button size=\"small\" type=\"primary\" icon=\"el-icon-edit\" @click=\"update\">修改</el-button>\n                        <el-button size=\"small\" type=\"danger\" icon=\"el-icon-delete\" @click=\"del\">删除</el-button>\n                    </div>\n                    <r-table ref=\"mutipleTable\" :table-data=\"dictTableData\" :table-cols=\"dictTableCols\">\n                        <template slot=\"slot_status\" slot-scope=\"scope\">\n                            <el-tag v-if=\"scope.data.status==0\" type=\"success\" size=\"mini\">正常</el-tag>\n                            <el-tag v-else type=\"danger\" size=\"mini\">停用</el-tag>\n                        </template>\n                    </r-table>\n                </el-card>\n                <Add v-if=\"add.visible\" :param=\"add\" :typeId=\"selectTypeId\"></Add>\n                <Edit v-if=\"edit.visible\" :param=\"edit\" :typeId=\"selectTypeId\"></Edit>\n            </el-col>\n        </el-row>\n    </div>\n</template>\n\n<script>\n    import {type_query, dict_query, del} from '../../api/dict';\n    import RTable from \"../../components/RTable\";\n    import Add from \"./Add\";\n    import Edit from \"./Edit\";\n\n    export default {\n        name: \"Dict\",\n        components: {Edit, Add, RTable},\n        data() {\n            return {\n                typeTableData: [],\n                active: 0,\n                selectTypeId: 0,\n                typeTableCols: [\n                    {prop: 'name', label: '类型名称'}\n                ],\n                dictTableData: [],\n                dictTableCols: [\n                    {prop: 'dictKey', label: '字典名称'},\n                    {prop: 'dictVal', label: '字典值'},\n                    {prop: 'status', label: '状态', slot: 'slot_status'},\n                    {prop: 'sort', label: '序号', width: 100},\n                ],\n                add: {\n                    visible: false,\n                    close: this.close,\n                    callback: this.reload\n                },\n                edit: {\n                    visible: false,\n                    close: this.close,\n                    callback: this.reload,\n                    form: null\n                }\n            }\n        },\n        mounted() {\n            type_query({}).then(res => {\n                this.typeTableData = res.data;\n                this.selectTypeId = this.typeTableData[0].id;\n            })\n            this.list({typeId: this.selectTypeId})\n        },\n        methods: {\n            create() {\n                this.add.visible = true;\n            },\n            update() {\n                let selections = this.$refs['mutipleTable'].selection;\n                if (selections.length == 1) {\n                    this.edit.visible = true;\n                    this.edit.form = selections[0];\n                } else {\n                    this.$message.warning(\"请选择一条数据进行修改\");\n                }\n            },\n            reload() {\n                this.list({typeId: this.selectTypeId})\n            },\n            list(param) {\n                dict_query(param).then(res => {\n                    this.dictTableData = res.data;\n                })\n            },\n            close() {\n                this.add.visible = false;\n                this.edit.visible = false;\n            },\n            del() {\n                let selections = this.$refs['mutipleTable'].selection;\n                if (selections.length > 0) {\n                    this.$confirm(\"确定有删除吗？\", \"删除提示\").then(() => {\n                        let arr = selections.map(item => item.id);\n                        let ids = arr.join(',');\n                        del(ids).then(res => {\n                            this.$message.success(res.msg);\n                            this.reload();\n                        }).catch(() => {\n                        })\n                    })\n                } else {\n                    this.$message.warning(\"请选择要删除的数据\");\n                }\n            },\n            handleType(index, typeId) {\n                this.active = index;\n                this.selectTypeId = typeId;\n                this.list({typeId: typeId})\n            }\n        }\n    }\n</script>\n\n<style scoped>\n    .type {\n        list-style: none;\n        margin: 0;\n        padding: 0;\n    }\n\n    .type li {\n        height: 40px;\n        padding-left: 20px;\n        line-height: 40px;\n        box-sizing: border-box;\n        cursor: pointer;\n        font-size: 14px;\n    }\n\n    .type .active {\n        background-color: #009399;\n        color: #ffffff;\n        border-radius: 10px;\n    }\n</style>"],"sourceRoot":"src/views/dict"}]}