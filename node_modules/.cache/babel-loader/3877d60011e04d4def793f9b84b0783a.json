{"remainingRequest":"C:\\Users\\LGH\\Desktop\\job-web-master\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\LGH\\Desktop\\job-web-master\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\LGH\\Desktop\\job-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\LGH\\Desktop\\job-web-master\\src\\views\\post\\Add.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\LGH\\Desktop\\job-web-master\\src\\views\\post\\Add.vue","mtime":1639545989000},{"path":"C:\\Users\\LGH\\Desktop\\job-web-master\\babel.config.js","mtime":1639545989000},{"path":"C:\\Users\\LGH\\Desktop\\job-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1666580404783},{"path":"C:\\Users\\LGH\\Desktop\\job-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1666580385663},{"path":"C:\\Users\\LGH\\Desktop\\job-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1666580404783},{"path":"C:\\Users\\LGH\\Desktop\\job-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1666580381795}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUuanMiOwovLwovLwovLwovLwovLwovLwovLwppbXBvcnQgeyBjcmVhdGUgfSBmcm9tICJAL2FwaS9wb3N0IjsKaW1wb3J0IFJGb3JtIGZyb20gIkAvY29tcG9uZW50cy9SRm9ybSI7CmltcG9ydCB7IGRpY3RfcXVlcnkgfSBmcm9tICJAL2FwaS9kaWN0IjsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJBZGQiLAogIGNvbXBvbmVudHM6IHsKICAgIFJGb3JtOiBSRm9ybQogIH0sCiAgcHJvcHM6IHsKICAgIHBhcmFtOiB7CiAgICAgIHR5cGU6IE9iamVjdCwKICAgICAgZGVmYXVsdDogZnVuY3Rpb24gX2RlZmF1bHQoKSB7fQogICAgfQogIH0sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGZvcm06IHsKICAgICAgICBuYW1lOiAnJywKICAgICAgICBlZHVjYXRpb246ICcnLAogICAgICAgIHNhbGFyeTogJycsCiAgICAgICAgZGVzY3JpcHRpb246ICcnCiAgICAgIH0sCiAgICAgIHJ1bGVzOiB7CiAgICAgICAgbmFtZTogW3sKICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgICAgICAgbWVzc2FnZTogJ+W/heWhq+mhueS4jeiDveS4uuepuicKICAgICAgICB9XSwKICAgICAgICBlZHVjYXRpb246IFt7CiAgICAgICAgICByZXF1aXJlZDogdHJ1ZSwKICAgICAgICAgIG1lc3NhZ2U6ICflv4XloavpobnkuI3og73kuLrnqbonCiAgICAgICAgfV0sCiAgICAgICAgc2FsYXJ5OiBbewogICAgICAgICAgcmVxdWlyZWQ6IHRydWUsCiAgICAgICAgICBtZXNzYWdlOiAn5b+F5aGr6aG55LiN6IO95Li656m6JwogICAgICAgIH1dCiAgICAgIH0sCiAgICAgIGl0ZW1zOiBbewogICAgICAgIHR5cGU6ICd0ZXh0JywKICAgICAgICBsYWJlbDogJ+iBjOS9jeWQjeensCcsCiAgICAgICAgcHJvcDogJ25hbWUnLAogICAgICAgIG5hbWU6ICduYW1lJywKICAgICAgICBwbGFjZWhvbGRlcjogJ+iBjOS9jeWQjeensCcKICAgICAgfSwgewogICAgICAgIHR5cGU6ICdzZWxlY3QnLAogICAgICAgIGxhYmVsOiAn5a2m5Y6G6KaB5rGCJywKICAgICAgICBwcm9wOiAnZWR1Y2F0aW9uJywKICAgICAgICBuYW1lOiAnZWR1Y2F0aW9uJywKICAgICAgICBwbGFjZWhvbGRlcjogJ+WtpuWOhuimgeaxgicsCiAgICAgICAgb3B0aW9uczogW10KICAgICAgfSwgewogICAgICAgIHR5cGU6ICdzZWxlY3QnLAogICAgICAgIGxhYmVsOiAn6IGM5L2N6Jaq5rC0JywKICAgICAgICBwcm9wOiAnc2FsYXJ5JywKICAgICAgICBuYW1lOiAnc2FsYXJ5JywKICAgICAgICBwbGFjZWhvbGRlcjogJ+iBjOS9jeiWquawtCcsCiAgICAgICAgb3B0aW9uczogW10KICAgICAgfSwgewogICAgICAgIHR5cGU6ICdhcmVhJywKICAgICAgICBsYWJlbDogJ+iBjOS9jeaPj+i/sCcsCiAgICAgICAgcHJvcDogJ2Rlc2NyaXB0aW9uJywKICAgICAgICBuYW1lOiAnZGVzY3JpcHRpb24nLAogICAgICAgIHBsYWNlaG9sZGVyOiAn6IGM5L2N5o+P6L+wJwogICAgICB9XQogICAgfTsKICB9LAogIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICB0aGlzLmdldERpY3RMaXN0MSgyKTsKICAgIHRoaXMuZ2V0RGljdExpc3QyKDMpOwogIH0sCiAgbWV0aG9kczogewogICAgZ2V0RGljdExpc3QxOiBmdW5jdGlvbiBnZXREaWN0TGlzdDEodHlwZUlkKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBkaWN0X3F1ZXJ5KHsKICAgICAgICB0eXBlSWQ6IHR5cGVJZAogICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICB2YXIgYXJyID0gW107CiAgICAgICAgcmVzLmRhdGEuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgdmFyIHAgPSB7CiAgICAgICAgICAgIHZhbHVlOiBpdGVtLmRpY3RLZXksCiAgICAgICAgICAgIGxhYmVsOiBpdGVtLmRpY3RWYWwKICAgICAgICAgIH07CiAgICAgICAgICBhcnIucHVzaChwKTsKICAgICAgICB9KTsKCiAgICAgICAgX3RoaXMuaXRlbXMuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgaWYgKGl0ZW0udHlwZSA9PSAnc2VsZWN0JyAmJiBpdGVtLm5hbWUgPT0gJ2VkdWNhdGlvbicpIHsKICAgICAgICAgICAgaXRlbS5vcHRpb25zID0gYXJyOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0sCiAgICBnZXREaWN0TGlzdDI6IGZ1bmN0aW9uIGdldERpY3RMaXN0Mih0eXBlSWQpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICBkaWN0X3F1ZXJ5KHsKICAgICAgICB0eXBlSWQ6IHR5cGVJZAogICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICB2YXIgYXJyID0gW107CiAgICAgICAgcmVzLmRhdGEuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgdmFyIHAgPSB7CiAgICAgICAgICAgIHZhbHVlOiBpdGVtLmRpY3RLZXksCiAgICAgICAgICAgIGxhYmVsOiBpdGVtLmRpY3RWYWwKICAgICAgICAgIH07CiAgICAgICAgICBhcnIucHVzaChwKTsKICAgICAgICB9KTsKCiAgICAgICAgX3RoaXMyLml0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgIGlmIChpdGVtLnR5cGUgPT0gJ3NlbGVjdCcgJiYgaXRlbS5uYW1lID09ICdzYWxhcnknKSB7CiAgICAgICAgICAgIGl0ZW0ub3B0aW9ucyA9IGFycjsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9LAogICAgc2F2ZTogZnVuY3Rpb24gc2F2ZSgpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICB2YXIgZmxhZyA9IHRoaXMuJHJlZnNbJ215Rm9ybSddLnZhbGlkYXRlRm9ybSgpOwoKICAgICAgaWYgKGZsYWcpIHsKICAgICAgICBjcmVhdGUodGhpcy5mb3JtKS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICAgIF90aGlzMy4kbWVzc2FnZS5zdWNjZXNzKHJlcy5tc2cpOwoKICAgICAgICAgIF90aGlzMy5wYXJhbS5jbG9zZSgpOwoKICAgICAgICAgIF90aGlzMy5wYXJhbS5jYWxsYmFjaygpOwogICAgICAgIH0pOwogICAgICB9CiAgICB9CiAgfQp9Ow=="},{"version":3,"sources":["Add.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n    <el-dialog title=\"新增\" :fullscreen=\"true\" :visible.sync=\"param.visible\" @close=\"param.close\"\n               :close-on-click-modal=\"false\">\n        <r-form ref=\"myForm\" :rules=\"rules\" :form=\"form\" :items=\"items\" :save=\"save\"></r-form>\n    </el-dialog>\n</template>\n\n<script>\n    import {create} from \"@/api/post\";\n    import RForm from \"@/components/RForm\";\n    import {dict_query} from \"@/api/dict\";\n\n    export default {\n        name: \"Add\",\n        components: {RForm},\n        props: {\n            param: {\n                type: Object,\n                default: () => {\n                }\n            }\n        },\n        data() {\n            return {\n                form: {\n                    name: '',\n                    education: '',\n                    salary: '',\n                    description: '',\n                },\n                rules: {\n                    name: [{required: true, message: '必填项不能为空'}],\n                    education: [{required: true, message: '必填项不能为空'}],\n                    salary: [{required: true, message: '必填项不能为空'}],\n                },\n                items: [\n                    {type: 'text', label: '职位名称', prop: 'name', name: 'name', placeholder: '职位名称'},\n                    {\n                        type: 'select',\n                        label: '学历要求',\n                        prop: 'education',\n                        name: 'education',\n                        placeholder: '学历要求',\n                        options: []\n                    },\n                    {type: 'select', label: '职位薪水', prop: 'salary', name: 'salary', placeholder: '职位薪水', options: []},\n                    {type: 'area', label: '职位描述', prop: 'description', name: 'description', placeholder: '职位描述'},\n                ]\n            }\n        },\n        mounted() {\n            this.getDictList1(2);\n            this.getDictList2(3);\n        },\n        methods: {\n            getDictList1(typeId) {\n                dict_query({typeId: typeId}).then(res => {\n                    let arr = [];\n                    res.data.forEach(item => {\n                        let p = {value: item.dictKey, label: item.dictVal};\n                        arr.push(p);\n                    });\n                    this.items.forEach(item => {\n                        if (item.type == 'select' && item.name == 'education') {\n                            item.options = arr;\n                        }\n                    })\n                })\n            },\n            getDictList2(typeId) {\n                dict_query({typeId: typeId}).then(res => {\n                    let arr = [];\n                    res.data.forEach(item => {\n                        let p = {value: item.dictKey, label: item.dictVal};\n                        arr.push(p);\n                    });\n                    this.items.forEach(item => {\n                        if (item.type == 'select' && item.name == 'salary') {\n                            item.options = arr;\n                        }\n                    })\n                })\n            },\n            save() {\n                let flag = this.$refs['myForm'].validateForm();\n                if (flag) {\n                    create(this.form).then(res => {\n                        this.$message.success(res.msg);\n                        this.param.close();\n                        this.param.callback();\n                    })\n                }\n            }\n        }\n    }\n</script>\n\n<style scoped>\n\n</style>"],"sourceRoot":"src/views/post"}]}